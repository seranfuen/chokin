<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\ChokinCF\bin\ChokinCF.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ChokinCF.Models" #>
<#@ import namespace="ChokinCF.Models.T4" #>
<#@ output extension=".cs" #>
<# var identityModels = new ModelEntityIterator(typeof(ApplicationDbContext));#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ChokinCF.Models;

namespace ChokinCF.Repository
{
    public class RepositoryFactory
    {
		private Dictionary<Type, IRepository> _repositoryCache;
		private ApplicationDbContext _context;

		public RepositoryFactory(ApplicationDbContext context) 
		{
			_context = context;
			_repositoryCache = new Dictionary<Type, IRepository>();
		}

<#      foreach (var model in identityModels.ContextEntities) { #>
		public IRepository<<#= model.EntityName#>> <#=model.EntityName#>Repository 
		{
			get 
			{
				var modelType = typeof(<#=model.EntityName#>);
				if (!_repositoryCache.ContainsKey(typeof(<#=model.EntityName#>))) 
				{
					_repositoryCache[modelType] = new <#=model.EntityName#>Repository(_context);
				}
				return (IRepository<<#=model.EntityName#>>)_repositoryCache[modelType];
			}
		}

<# }

foreach (var model in identityModels.ContextEntities) { #>
        public static <#= model.EntityName #>Repository Create<#=model.EntityName#>Repository()
        {
            return new <#= model.EntityName #>Repository(new ApplicationDbContext());
        }
<#    } #>
   }
}