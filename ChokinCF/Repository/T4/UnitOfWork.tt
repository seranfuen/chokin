<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\ChokinCF\bin\ChokinCF.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ChokinCF.Models" #>
<#@ import namespace="ChokinCF.Models.T4" #>
<#@ output extension=".cs" #>
<# var identityModels = new ModelEntityIterator(typeof(ApplicationDbContext));#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ChokinCF.Models;

namespace ChokinCF.Repository
{
	public sealed class UnitOfWork : IDisposable
	{
		private RepositoryFactory _factory;
		private ApplicationDbContext _context;
		private bool _disposed;

		public UnitOfWork() 
		{
			_context = new ApplicationDbContext();
			_factory = new RepositoryFactory(_context);
		}

		public void Commit() 
		{
			_context.SaveChanges();
		}

		public void Dispose() 
		{
			Dispose(true);
			GC.SuppressFinalize(this);  
		}

		private void Dispose(bool disposing) 
		{
			if (!_disposed)	 
			{
				_disposed = true;
				_context.Dispose();
			}
		}

		#region ' Repositories '

<# foreach (var model in identityModels.ContextEntities) { #>
		public IRepository<<#=model.EntityName#>> <#=model.EntityName #>Repository { get { return _factory.<#=model.EntityName #>Repository; } }
<# } #>

		#endregion
	}
}